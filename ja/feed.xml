<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes – プロダクショングレードのコンテナ管理基盤</title><link>https://kubernetes.io/ja/</link><description>The Kubernetes project blog</description><generator>Hugo -- gohugo.io</generator><image><url>https://raw.githubusercontent.com/kubernetes/kubernetes/master/logo/logo.png</url><title>Kubernetes.io</title><link>https://kubernetes.io/ja/</link></image><atom:link href="https://kubernetes.io/ja/feed.xml" rel="self" type="application/rss+xml"/><item><title>Blog: 更新: dockershimの削除に関するFAQ</title><link>https://kubernetes.io/ja/blog/2022/02/17/dockershim-faq/</link><pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate><guid>https://kubernetes.io/ja/blog/2022/02/17/dockershim-faq/</guid><description>
&lt;p>&lt;strong>この記事は2020年の後半に投稿されたオリジナルの記事&lt;a href="https://kubernetes.io/blog/2020/12/02/dockershim-faq/">Dockershim Deprecation FAQ&lt;/a>の更新版です。
この記事にはv1.24のリリースに関する更新を含みます。&lt;/strong>&lt;/p>
&lt;hr>
&lt;p>この文書では、Kubernetesからの &lt;em>dockershim&lt;/em> の削除に関するよくある質問について説明します。
この削除はKubernetes v1.20リリースの一部としてはじめて&lt;a href="https://kubernetes.io/blog/2020/12/08/kubernetes-1-20-release-announcement/">発表&lt;/a>されたものです。
Kubernetes &lt;a href="https://kubernetes.io/releases/#release-v1-24">v1.24のリリース&lt;/a>においてdockershimは実際にKubernetesから削除されました。&lt;/p>
&lt;p>これが何を意味するかについては、ブログ記事&lt;a href="https://kubernetes.io/ja/blog/2020/12/02/dont-panic-kubernetes-and-docker/">Don't Panic: Kubernetes and Docker&lt;/a>をご覧ください。&lt;/p>
&lt;p>&lt;a href="https://kubernetes.io/ja/docs/tasks/administer-cluster/migrating-from-dockershim/check-if-dockershim-removal-affects-you/">dockershim削除の影響範囲を確認する&lt;/a>をお読みいただくことで、
dockershimの削除があなたやあなたの組織に与える影響をご判断いただけます。&lt;/p>
&lt;p>Kubernetes 1.24リリースに至るまでの間、Kubernetesコントリビューターはこの移行を円滑に行えるようにするために尽力してきました。&lt;/p>
&lt;ul>
&lt;li>私たちの&lt;a href="https://kubernetes.io/blog/2022/01/07/kubernetes-is-moving-on-from-dockershim/">コミットメントと次のステップ&lt;/a>を詳述したブログ記事。&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/ja/docs/setup/production-environment/container-runtimes/#container-runtimes">他のコンテナランタイム&lt;/a>への移行に大きな障害があるかどうかのチェック。&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/ja/docs/tasks/administer-cluster/migrating-from-dockershim/">dockershimからの移行&lt;/a>ガイドの追加。&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/node/topics-on-dockershim-and-cri-compatible-runtimes/">dockershimの削除とCRI互換ランタイムの使用に関する記事一覧&lt;/a>の作成。
このリストには、上に示した文書の一部が含まれており、また、厳選された外部の情報(ベンダーによるガイドを含む)もカバーしています。&lt;/li>
&lt;/ul>
&lt;h3 id="dockershimはなぜkubernetesから削除されたのですか">dockershimはなぜKubernetesから削除されたのですか？&lt;/h3>
&lt;p>Kubernetesの初期のバージョンは、特定のコンテナランタイム上でのみ動作しました。
Docker Engineです。その後、Kubernetesは他のコンテナランタイムと連携するためのサポートを追加しました。
オーケストレーター(Kubernetesなど)と多くの異なるコンテナランタイムの間の相互運用を可能にするため、
CRI標準が&lt;a href="https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/">作成&lt;/a>されました。
Docker Engineはそのインターフェイス(CRI)を実装していないため、Kubernetesプロジェクトは移行を支援する特別なコードを作成し、
その &lt;em>dockershim&lt;/em> コードをKubernetes自身の一部としました。&lt;/p>
&lt;p>dockershimコードは常に一時的な解決策であることを意図されていました(このためshimと名付けられています)。
コミュニティでの議論や計画については、&lt;a href="https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/2221-remove-dockershim">dockershimの削除によるKubernetes改良の提案&lt;/a>にてお読みいただけます。&lt;/p>
&lt;p>実際、dockershimのメンテナンスはKubernetesメンテナーにとって大きな負担になっていました。&lt;/p>
&lt;p>さらに、dockershimとほとんど互換性のなかった機能、たとえばcgroups v2やユーザーネームスペースなどが、
これらの新しいCRIランタイムに実装されています。Kubernetesからdockershimを削除することで、これらの分野でのさらなる開発が可能になります。&lt;/p>
&lt;h3 id="dockerとコンテナは同じものですか">Dockerとコンテナは同じものですか？&lt;/h3>
&lt;p>DockerはLinuxのコンテナパターンを普及させ、その基盤技術の発展に寄与してきましたが、
Linuxのコンテナ技術そのものはかなり以前から存在しています。
また、コンテナエコシステムはDockerを超えてより広範に発展してきました。
OCIやCRIのような標準は、Dockerの機能の一部を置き換えたり、既存の機能を強化したりすることで、
私達のエコシステムの多くのツールの成長と繁栄を助けてきました。&lt;/p>
&lt;h3 id="既存のコンテナイメージは引き続き使えるのですか">既存のコンテナイメージは引き続き使えるのですか？&lt;/h3>
&lt;p>はい、&lt;code>docker build&lt;/code>から生成されるイメージは、全てのCRI実装で動作します。
既存のイメージも全く同じように動作します。&lt;/p>
&lt;h3 id="プライベートイメージについてはどうでしょうか">プライベートイメージについてはどうでしょうか？&lt;/h3>
&lt;p>はい、すべてのCRIランタイムはKubernetesで使われているものと同一のpull secretsをサポートしており、
PodSpecまたはService Accountを通して利用できます。&lt;/p>
&lt;h3 id="kubernetes-1-23でdocker-engineを引き続き使用できますか">Kubernetes 1.23でDocker Engineを引き続き使用できますか？&lt;/h3>
&lt;p>はい、1.20で変更されたのは、Docker Engineランタイムを使用している場合に警告ログが&lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/">kubelet&lt;/a>起動時に出るようになったことだけです。
この警告は、1.23までのすべてのバージョンで表示されます。
dockershimの削除はKubernetes 1.24で行われました。&lt;/p>
&lt;p>Kubernetes v1.24以降を実行している場合は、&lt;a href="#can-i-still-use-docker-engine-as-my-container-runtime">Docker Engineを引き続きコンテナランタイムとして利用できますか？&lt;/a>をご覧ください。
(CRIがサポートされているKubernetesリリースを使用している場合、dockershimから切り替えることができることを忘れないでください。
リリースv1.24からはKubernetesにdockershimが含まれなくなったため、&lt;strong>必ず&lt;/strong>切り替えなければなりません)。&lt;/p>
&lt;h3 id="どのcriの実装を使うべきでしょうか">どのCRIの実装を使うべきでしょうか？&lt;/h3>
&lt;p>これは難しい質問で、様々な要素に依存します。
もしDocker Engineがうまく動いているのであれば、containerdに移行するのは比較的簡単で、
性能もオーバーヘッドも確実に改善されるでしょう。
しかし、他の選択のほうがあなたの環境により適合する場合もありますので、
&lt;a href="https://landscape.cncf.io/card-mode?category=container-runtime&amp;amp;grouping=category">CNCF landscape&lt;/a>にあるすべての選択肢を検討されることをおすすめします。&lt;/p>
&lt;h4 id="can-i-still-use-docker-engine-as-my-container-runtime">Docker Engineを引き続きコンテナランタイムとして利用できますか？&lt;/h4>
&lt;p>第一に、ご自身のPCで開発やテスト用途でDockerを使用している場合、何も変わることはありません。
Kubernetesでどのコンテナランタイムを使っていても、Dockerをローカルで使い続けることができます。
コンテナではこのような相互運用性を実現できます。&lt;/p>
&lt;p>MirantisとDockerは、Kubernetesから内蔵のdockershimが削除された後も、
Docker Engineの代替アダプターを維持することに&lt;a href="https://www.mirantis.com/blog/mirantis-to-take-over-support-of-kubernetes-dockershim-2/">コミット&lt;/a>しています。
代替アダプターの名前は&lt;a href="https://github.com/Mirantis/cri-dockerd">&lt;code>cri-dockerd&lt;/code>&lt;/a>です。&lt;/p>
&lt;p>&lt;code>cri-dockerd&lt;/code>をインストールして、kubeletをDocker Engineに接続するために使用することができます。
詳細については、&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/migrating-from-dockershim/migrate-dockershim-dockerd/">Migrate Docker Engine nodes from dockershim to cri-dockerd&lt;/a>を読んでください。&lt;/p>
&lt;h3 id="今現在でプロダクション環境に他のランタイムを使用している例はあるのでしょうか">今現在でプロダクション環境に他のランタイムを使用している例はあるのでしょうか？&lt;/h3>
&lt;p>Kubernetesプロジェクトが生み出したすべての成果物(Kubernetesバイナリ)は、リリースごとに検証されています。&lt;/p>
&lt;p>また、&lt;a href="https://kind.sigs.k8s.io/">kind&lt;/a>プロジェクトは以前からcontainerdを使っており、プロジェクトのユースケースにおいて安定性が向上してきています。
kindとcontainerdは、Kubernetesコードベースの変更を検証するために毎日何回も利用されています。
他の関連プロジェクトも同様のパターンを追っており、他のコンテナランタイムの安定性と使いやすさが示されています。
例として、OpenShift 4.xは2019年6月以降、CRI-Oランタイムをプロダクション環境で使っています。&lt;/p>
&lt;p>他の事例や参考資料はについては、
containerdとCRI-O(Cloud Native Computing Foundation (&lt;a href="https://cncf.io">CNCF&lt;/a>)の2つのコンテナランタイム)の採用例をご覧ください。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/containerd/containerd/blob/master/ADOPTERS.md">containerd&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/cri-o/cri-o/blob/master/ADOPTERS.md">CRI-O&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="ociという単語をよく見るのですが-これは何ですか">OCIという単語をよく見るのですが、これは何ですか？&lt;/h3>
&lt;p>OCIは&lt;a href="https://opencontainers.org/about/overview/">Open Container Initiative&lt;/a>の略で、コンテナツールとテクノロジー間の数多くのインターフェースの標準化を行った団体です。
彼らはコンテナイメージをパッケージするための標準仕様(OCI image-spec)と、
コンテナを実行するための標準仕様(OCI runtime-spec)をメンテナンスしています。
また、&lt;a href="https://github.com/opencontainers/runc">runc&lt;/a>という形でruntime-specの実装もメンテナンスしており、
これは&lt;a href="https://containerd.io/">containerd&lt;/a>と&lt;a href="https://cri-o.io/">CRI-O&lt;/a>の両方でデフォルトの下位ランタイムとなっています。
CRIはこれらの低レベル仕様に基づいて、コンテナを管理するためのエンドツーエンドの標準を提供します。&lt;/p>
&lt;h3 id="cri実装を変更する際に注意すべきことは何ですか">CRI実装を変更する際に注意すべきことは何ですか？&lt;/h3>
&lt;p>DockerとほとんどのCRI(containerdを含む)において、下位で使用されるコンテナ化コードは同じものですが、
いくつかの細かい違いが存在します。移行する際に考慮すべき一般的な事項は次のとおりです。&lt;/p>
&lt;ul>
&lt;li>ログ設定&lt;/li>
&lt;li>ランタイムリソースの制限&lt;/li>
&lt;li>ノード構成スクリプトでdockerコマンドやコントロールソケット経由でDocker Engineを使用しているもの&lt;/li>
&lt;li>&lt;code>kubectl&lt;/code>のプラグインで&lt;code>docker&lt;/code> CLIまたはDocker Engineコントロールソケットが必要なもの&lt;/li>
&lt;li>KubernetesプロジェクトのツールでDocker Engineへの直接アクセスが必要なもの(例:廃止された&lt;code>kube-imagepuller&lt;/code>ツール)&lt;/li>
&lt;li>&lt;code>registry-mirrors&lt;/code>やinsecureレジストリなどの機能の設定&lt;/li>
&lt;li>その他の支援スクリプトやデーモンでDocker Engineが利用可能であることを想定していてKubernetes外で実行されるもの(モニタリング・セキュリティエージェントなど)&lt;/li>
&lt;li>GPUまたは特別なハードウェア、そしてランタイムおよびKubernetesとそれらハードウェアの統合方法&lt;/li>
&lt;/ul>
&lt;p>あなたがKubernetesのリソース要求/制限やファイルベースのログ収集DaemonSetを使用しているのであれば、それらは問題なく動作し続けますが、
&lt;code>dockerd&lt;/code>の設定をカスタマイズしていた場合は、それを新しいコンテナランタイムに適合させる必要があるでしょう。&lt;/p>
&lt;p>他に注意することとしては、システムメンテナンスを実行するようなものや、コンテナ内でイメージをビルドするようなものが動作しなくなります。
前者の場合は、&lt;a href="https://github.com/kubernetes-sigs/cri-tools">&lt;code>crictl&lt;/code>&lt;/a>ツールをdrop-inの置き換えとして使用できます(&lt;a href="https://kubernetes.io/ja/docs/tasks/debug/debug-cluster/crictl/#docker-cli%E3%81%8B%E3%82%89crictl%E3%81%B8%E3%81%AE%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0">docker cliからcrictlへのマッピング&lt;/a>を参照)。
後者の場合は、&lt;a href="https://github.com/genuinetools/img">img&lt;/a>、&lt;a href="https://github.com/containers/buildah">buildah&lt;/a>、&lt;a href="https://github.com/GoogleContainerTools/kaniko">kaniko&lt;/a>、&lt;a href="https://github.com/vmware-tanzu/buildkit-cli-for-kubectl">buildkit-cli-for-kubectl&lt;/a>のようなDockerを必要としない新しいコンテナビルドの選択肢を使用できます。&lt;/p>
&lt;p>containerdを使っているのであれば、&lt;a href="https://github.com/containerd/cri/blob/master/docs/registry.md">ドキュメント&lt;/a>を参照して、移行するのにどのような構成が利用可能かを確認するところから始めるといいでしょう。&lt;/p>
&lt;p>containerdとCRI-OをKubernetesで使用する方法に関しては、&lt;a href="https://kubernetes.io/ja/docs/setup/production-environment/container-runtimes/">コンテナランタイム&lt;/a>に関するKubernetesのドキュメントを参照してください。&lt;/p>
&lt;h3 id="さらに質問がある場合どうすればいいでしょうか">さらに質問がある場合どうすればいいでしょうか？&lt;/h3>
&lt;p>ベンダーサポートのKubernetesディストリビューションを使用している場合、彼らの製品に対するアップグレード計画について尋ねることができます。
エンドユーザーの質問に関しては、&lt;a href="https://discuss.kubernetes.io/">エンドユーザーコミュニティフォーラム&lt;/a>に投稿してください。&lt;/p>
&lt;p>dockershimの削除に関する決定については、専用の&lt;a href="https://github.com/kubernetes/kubernetes/issues/106917">GitHub issue&lt;/a>で議論することができます。&lt;/p>
&lt;p>変更点に関するより詳細な技術的な議論は、&lt;a href="https://dev.to/inductor/wait-docker-is-deprecated-in-kubernetes-now-what-do-i-do-e4m">待ってください、DockerはKubernetesで非推奨になったのですか？&lt;/a>という素晴らしいブログ記事も参照してください。&lt;/p>
&lt;h3 id="dockershimを使っているかどうかを検出できるツールはありますか">dockershimを使っているかどうかを検出できるツールはありますか？&lt;/h3>
&lt;p>はい！&lt;a href="https://github.com/aws-containers/kubectl-detector-for-docker-socket">Detector for Docker Socket (DDS)&lt;/a>というkubectlプラグインをインストールすることであなたのクラスターを確認していただけます。
DDSは、アクティブなKubernetesワークロードがDocker Engineソケット(&lt;code>docker.sock&lt;/code>)をボリュームとしてマウントしているかを検出できます。
さらなる詳細と使用パターンについては、DDSプロジェクトの&lt;a href="https://github.com/aws-containers/kubectl-detector-for-docker-socket">README&lt;/a>を参照してください。&lt;/p>
&lt;h3 id="ハグしていただけますか">ハグしていただけますか？&lt;/h3>
&lt;p>はい、私達は引き続きいつでもハグに応じています。🤗🤗🤗&lt;/p></description></item><item><title>Blog: Don't Panic: Kubernetes and Docker</title><link>https://kubernetes.io/ja/blog/2020/12/02/dont-panic-kubernetes-and-docker/</link><pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate><guid>https://kubernetes.io/ja/blog/2020/12/02/dont-panic-kubernetes-and-docker/</guid><description>
&lt;p>&lt;strong>著者:&lt;/strong> Jorge Castro, Duffie Cooley, Kat Cosgrove, Justin Garrison, Noah Kantrowitz, Bob Killen, Rey Lejano, Dan “POP” Papandrea, Jeffrey Sica, Davanum “Dims” Srinivas&lt;/p>
&lt;p>Kubernetesはv1.20より新しいバージョンで、コンテナランタイムとして&lt;a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md#deprecation">Dockerをサポートしません&lt;/a>。&lt;/p>
&lt;p>&lt;strong>パニックを起こす必要はありません。これはそれほど抜本的なものではないのです。&lt;/strong>&lt;/p>
&lt;p>概要: ランタイムとしてのDockerは、Kubernetesのために開発された&lt;a href="https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/">Container Runtime Interface(CRI)&lt;/a>を利用しているランタイムを選んだ結果としてサポートされなくなります。しかし、Dockerによって生成されたイメージはこれからも、今までもそうだったように、みなさんのクラスターで使用可能です。&lt;/p>
&lt;p>もし、あなたがKubernetesのエンドユーザーであるならば、多くの変化はないでしょう。これはDockerの死を意味するものではありませんし、開発ツールとして今後Dockerを使用するべきでない、使用することは出来ないと言っているのでもありません。Dockerはコンテナを作成するのに便利なツールですし、docker buildコマンドで作成されたイメージはKubernetesクラスタ上でこれからも動作可能なのです。&lt;/p>
&lt;p>もし、GKE、EKS、AKSといったマネージドKubernetesサービス(それらはデフォルトで&lt;a href="https://github.com/Azure/AKS/releases/tag/2020-11-16">containerdを使用しています&lt;/a>)を使っているのなら、ワーカーノードがサポート対象のランタイムを使用しているか、Dockerのサポートが将来のK8sバージョンで切れる前に確認しておく必要があるでしょう。
もし、ノードをカスタマイズしているのなら、環境やRuntimeの仕様に合わせて更新する必要があるでしょう。サービスプロバイダーと確認し、アップグレードのための適切なテストと計画を立ててください。&lt;/p>
&lt;p>もし、ご自身でClusterを管理しているのなら、やはり問題が発生する前に必要な対応を行う必要があります。v1.20の時点で、Dockerの使用についての警告メッセージが表示されるようになります。将来のKubernetesリリース(現在の計画では2021年下旬のv1.22)でDockerのRuntimeとしての使用がサポートされなくなれば、containerdやCRI-Oといった他のサポート対象のRuntimeに切り替える必要があります。切り替える際、そのRuntimeが現在使用しているDocker Daemonの設定をサポートすることを確認してください。(Loggingなど)&lt;/p>
&lt;h2 id="では-なぜ混乱が生じ-誰もが恐怖に駆られているのか">では、なぜ混乱が生じ、誰もが恐怖に駆られているのか。&lt;/h2>
&lt;p>ここで議論になっているのは2つの異なる場面についてであり、それが混乱の原因になっています。Kubernetesクラスターの内部では、Container runtimeと呼ばれるものがあり、それはImageをPullし起動する役目を持っています。Dockerはその選択肢として人気があります(他にはcontainerdやCRI-Oが挙げられます)が、しかしDockerはそれ自体がKubernetesの一部として設計されているわけではありません。これが問題の原因となっています。&lt;/p>
&lt;p>お分かりかと思いますが、ここで”Docker”と呼んでいるものは、ある1つのものではなく、その技術的な体系の全体であり、その一部には&amp;quot;containerd&amp;quot;と呼ばれるものもあり、これはそれ自体がハイレベルなContainer runtimeとなっています。Dockerは素晴らしいもので、便利です。なぜなら、多くのUXの改善がされており、それは人間が開発を行うための操作を簡単にしているのです。しかし、それらはKubernetesに必要なものではありません。Kubernetesは人間ではないからです。
このhuman-friendlyな抽象化レイヤが作られてために、結果としてはKubernetesクラスタはDockershimと呼ばれるほかのツールを使い、本当に必要な機能つまりcontainerdを利用してきました。これは素晴らしいとは言えません。なぜなら、我々がメンテする必要のあるものが増えますし、それは問題が発生する要因ともなります。今回の変更で実際に行われることというのは、Dockershimを最も早い場合でv1.23のリリースでkubeletから除外することです。その結果として、Dockerのサポートがなくなるということなのです。
ここで、containerdがDockerに含まれているなら、なぜDockershimが必要なのかと疑問に思われる方もいるでしょう。&lt;/p>
&lt;p>DockerはCRI(&lt;a href="https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/">Container Runtime Interface&lt;/a>)に準拠していません。もしそうであればshimは必要ないのですが、現実はそうでありません。
しかし、これは世界の終わりでありません、心配しないでください。みなさんはContainer runtimeをDockerから他のサポート対象であるContainer runtimeに切り替えるだけでよいのです。&lt;/p>
&lt;p>1つ注意すべきことは、クラスターで行われる処理のなかでDocker socket(&lt;code>/var/run/docker.sock&lt;/code>)に依存する部分がある場合、他のRuntimeへ切り替えるとこの部分が働かなくなるでしょう。このパターンはしばしばDocker in Dockerと呼ばれます。このような場合の対応方法はたくさんあります。&lt;a href="https://github.com/GoogleContainerTools/kaniko">kaniko&lt;/a>、&lt;a href="https://github.com/genuinetools/img">img&lt;/a>、&lt;a href="https://github.com/containers/buildah">buildah&lt;/a>などです。&lt;/p>
&lt;h2 id="では開発者にとって-この変更は何を意味するのか-これからもdockerfileを使ってよいのか-これからもdockerでビルドを行ってよいのか">では開発者にとって、この変更は何を意味するのか。これからもDockerfileを使ってよいのか。これからもDockerでビルドを行ってよいのか。&lt;/h2>
&lt;p>この変更は、Dockerを直接操作している多くのみなさんとは別の場面に影響を与えるでしょう。
みなさんが開発を行う際に使用しているDockerと、Kubernetesクラスタの内部で使われているDocker runtimeは関係ありません。これがわかりにくいことは理解しています。開発者にとって、Dockerはこれからも便利なものであり、このアナウンスがあった前と変わらないでしょう。DockerでビルドされたImageは、決してDockerでだけ動作するというわけではありません。それはOCI(&lt;a href="https://opencontainers.org/">Open Container Initiative&lt;/a>) Imageと呼ばれるものです。あらゆるOCI準拠のImageは、それを何のツールでビルドしたかによらず、Kubernetesから見れば同じものなのです。&lt;a href="https://containerd.io/">containerd&lt;/a>も&lt;a href="https://cri-o.io/">CRI-O&lt;/a>も、そのようなImageをPullし、起動することが出来ます。
これがコンテナの仕様について、共通の仕様を策定している理由なのです。&lt;/p>
&lt;p>さて、この変更は決定しています。いくつかの問題は発生するかもしてませんが、決して壊滅的なものではなく、ほとんどの場合は良い変化となるでしょう。Kubernetesをどのように使用しているかによりますが、この変更が特に何の影響も及ぼさない人もいるでしょうし、影響がとても少ない場合もあります。長期的に見れば、物事を簡単にするのに役立つものです。
もし、この問題がまだわかりにくいとしても、心配しないでください。Kubernetesでは多くのものが変化しており、その全てに完璧に精通している人など存在しません。
経験の多寡や難易度にかかわらず、どんなことでも質問してください。我々の目標は、全ての人が将来の変化について、可能な限りの知識と理解を得られることです。
このブログが多くの質問の答えとなり、不安を和らげることができればと願っています。&lt;/p>
&lt;p>別の情報をお探しであれば、&lt;a href="https://kubernetes.io/ja/dockershim">dockershimの削除に関するFAQ&lt;/a>を参照してください。&lt;/p></description></item></channel></rss>